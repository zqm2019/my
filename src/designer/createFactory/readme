/**
* 创建型模式
*  1.工厂模式：
*       一个抽象产品类(Sender),可以派生出多个具体产品类(EmailSender,MessageSender);
*       一个抽象工厂类，可以派生出多个具体工厂类，每个具体工厂类只能创建一个具体的产品类实例。
*  2.抽象工厂模式
*       多个抽象产品类，每个抽象产品类可以派生出多个具体产品类;
*       一个抽象工厂类(AbstractFactory)，可以派生出多个具体工厂类(ReceiverFactory,SenderFactory);
*       每个具体工厂类可以创建多个具体产品类的实例,如ReceiverFactory可以产生具体接受者和发送者实力。
*  3.单例模式
*       单例模式能保证在一个jvm中，该对象只有一个实例存在：减少开销，减轻GC压力
*  4.建造者模式
*       目的：将一个复杂的构建与其表示相分离，使得同样的构建过程可以创建不同的表示;
*       使用:基本部件不变，但其组合可以任意变化的时候
*       如何解决:将变和不变分开
*       与工厂模式相比，建造者模式跟家关注零件装配的顺序
*  5.原型模式
*       该模式的四肖那个就是将一个对象作为原型，对其进行复制、克隆产生一个与原对象类似的新对象。
*       如何做：实现Cloneable接口(空接口)，实现clone()；
*       分为:深复制,复制原型对象，创建的所有的属性包括原型对象的基本类型和引用类型；
*            浅复制,复制原型对象的基本数据类型，而引用类型指向的还是原对象的所指向的
*/